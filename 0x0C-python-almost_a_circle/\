#!/usr/bin/python3
"""
    Test Case for Square base
"""
import unittest
from models.square import Square
from models.base import Base


class TestSquare(unittest.TestCase):
    """Test cases for Square class"""

    @classmethod
    def setUpClass(cls):
        """set up the tests"""
        Base._Base__nb_objects = 0
        cls.s1 = Square(5)
        cls.s2 = Square(5, 2)

    def test_id(self):
        """Test for functioning ID"""
        self.assertEqual(self.s1.id, 1)
        self.assertEqual(self.s2.id, 2)

    def test_size(self):
        """Test for functioning size"""
        self.assertEqual(self.s1.size, 5)
        self.assertEqual(self.s2.size, 5)

    def test_x(self):
        """Test for functioning width"""
        self.assertEqual(self.s1.x, 0)
        self.assertEqual(self.s2.x, 2)

    def test_y(self):
        """Test for functioning height"""
        self.assertEqual(self.s1.y, 0)
        self.assertEqual(self.s2.y, 0)
        
    def test_normal_use(self):
        """Testing expected use case"""
        self.assertIsInstance(self.s1, Square)
        self.assertIsInstance(self.s2, Square)

    def test_None_as_first_arg(self):
        """Testing None as first argument"""
        with self.assertRaises(TypeError):
            s3 = Square(None, 3)

    def test_too_many_args(self):
        """Testing too many args passed to fn"""
        with self.assertRaises(TypeError):
            s3 = Square(5, 4, 7, 3, 2)

    def test_area(self):
        """Testing area method fof cls Square"""
        s4 = Square(5)
        self.assertEqual(s4.area(), 25)

    def test_negative_int(self):
        """Testing for a neg int as an arg"""
        with self.assertRaises(ValueError):
            s5 = Square(-5)

    def test_neg_ints(self):
        """Testing for several negative int arguments"""
        with self.assertRaises(ValueError):
            s6 = Square(-1, -3, -5)

    def test_kwargs(self):
        """Testing for keyword args passed to fn"""
        s7 = Square(size=5, x=3, id=100, y=2)
        self.assertEqual(s7.size, 5)
        self.assertEqual(s7.y, 2)
        self.assertEqual(s7.id, 100)
        self.assertEqual(s7.x, 3)

    def test_print(self):
        """Testing __str__ method"""
        s8 = Square(5, 4, 7, 3)
        self.assertEqual(print(s8), "[Square] (3) 7/3 - 5" )
#[Square] ({}) {}/{} - {}".format(self.id, self.x, self.y,
# 18                                                  self.width)



if __name__ == "__main__":
    unittest.main()
